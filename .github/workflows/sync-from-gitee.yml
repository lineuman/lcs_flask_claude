name: Sync from Gitee to GitHub

on:
  workflow_dispatch:  # 手动触发
  schedule:
    # 每天 UTC 06,14,15,16（东八区 14,22,23,24）
    - cron: '0 6,14,15,16 * * *'

jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 👇 在此处直接定义你要同步的仓库
        repos:
          - name: "Project A"
            gitee_url: "https://gitee.com/yourname/repo-a.git"
            gitee_branch: "main"
            github_repo: "repo-a"
            github_branch: "main"
            private: false

          - name: "Project B"
            gitee_url: "https://gitee.com/yourname/repo-b.git"
            gitee_branch: "dev"
            github_repo: "repo-b"
            github_branch: "main"
            private: true

          # 可继续添加更多
      fail-fast: false

    steps:
      - name: Set Config from Matrix
        id: config
        run: |
          echo "name=${{ matrix.repos.name }}" >> $GITHUB_OUTPUT
          echo "gitee_url=${{ matrix.repos.gitee_url }}" >> $GITHUB_OUTPUT
          echo "gitee_branch=${{ matrix.repos.gitee_branch }}" >> $GITHUB_OUTPUT
          echo "github_repo=${{ matrix.repos.github_repo }}" >> $GITHUB_OUTPUT
          echo "github_branch=${{ matrix.repos.github_branch }}" >> $GITHUB_OUTPUT
          echo "private=${{ matrix.repos.private }}" >> $GITHUB_OUTPUT

      - name: Ensure GitHub Repository Exists
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ steps.config.outputs.github_repo }}
          PRIVATE: ${{ steps.config.outputs.private }}
        run: |
          url="https://api.github.com/repos/$OWNER/$REPO"
          if curl -s -H "Authorization: Bearer $GH_TOKEN" "$url" | jq -e '.id' > /dev/null; then
            echo "✅ 仓库已存在，更新私有性"
            curl -X PATCH -H "Authorization: Bearer $GH_TOKEN" \
                 -H "Accept: application/vnd.github.v3+json" \
                 "$url" -d "{\"private\":$PRIVATE}"
          else
            echo "📦 仓库不存在，正在创建"
            curl -X POST -H "Authorization: Bearer $GH_TOKEN" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/user/repos \
                 -d "{\"name\":\"$REPO\", \"private\":$PRIVATE}"
          fi

      - name: Clone from Gitee and Push to GitHub
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITEE_USERNAME: ${{ secrets.GITEE_USERNAME }}
          GITEE_PASSWORD: ${{ secrets.GITEE_PASSWORD }}
          GITEE_URL: ${{ steps.config.outputs.gitee_url }}
          GITEE_BRANCH: ${{ steps.config.outputs.gitee_branch }}
          GITHUB_REPO: ${{ steps.config.outputs.github_repo }}
          GITHUB_BRANCH: ${{ steps.config.outputs.github_branch }}
          OWNER: ${{ github.repository_owner }}
          NAME: ${{ steps.config.outputs.name }}
        run: |
          set -eux

          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # 构造带认证的 Gitee URL
          AUTH_URL=$(echo "$GITEE_URL" | sed "s|https://|https://$GITEE_USERNAME:$GITEE_PASSWORD@|")

          # 克隆 Gitee 仓库
          git clone -b "$GITEE_BRANCH" --depth=1 "$AUTH_URL" cloned_repo
          cd cloned_repo

          # 检查是否为空
          if [ -z "$(ls -A .)" ]; then
            echo "⚠️ 仓库为空，跳过"
            exit 0
          fi

          COMMIT=$(git rev-parse HEAD)

          # 复制内容到新目录（排除 .git 和 .github）
          cd ..
          mkdir -p workspace
          rsync -av --exclude='.git' --exclude='.github' cloned_repo/ workspace/
          cd workspace

          # 初始化并推送到 GitHub
          git init
          git checkout -b "$GITHUB_BRANCH"
          git add .
          git commit -m "Sync from Gitee: $NAME\n\nGitee Commit: $COMMIT"

          git remote add origin "https://$GH_TOKEN@github.com/$OWNER/$GITHUB_REPO.git"
          git push -f origin "$GITHUB_BRANCH"

          echo "🎉 同步完成: $NAME"
